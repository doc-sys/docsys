"use strict";

var _error = require("./lib/helpers/error");

var express = require('express');

var path = require('path');

var logger = require('morgan'); // eslint-disable-next-line no-unused-vars


var compression = require('compression'); // eslint-disable-next-line no-unused-vars


var helmet = require('helmet');

var mongoose = require('mongoose');

var fs = require('fs');

var jwt = require('jsonwebtoken');

var cors = require('cors');

require('dotenv-defaults').config();

var indexRouter = require('./routes/index.route');

var usersRouter = require('./routes/user.route');

var docRouter = require('./routes/document.route');

var messageRouter = require('./routes/message.route');

var app = express();

try {
  mongoose.connect(process.env.NODE_ENV == 'test' ? process.env.DB_PATH_TEST : process.env.DB_PATH, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useFindAndModify: true
  });
} catch (error) {
  console.error(error.message);
  process.exit(1);
}

mongoose.set('useCreateIndex', true);
process.env.NODE_ENV === 'production' ? app.use(compression()).use(helmet()) : null; // logging setup (check if using test env)

if (process.env.NODE_ENV !== 'test') {
  app.use(logger('[ :date[web] ] :method :url - :status in :response-time[3] ms', {
    skip: function skip(req, res) {
      return res.statusCode < 400;
    }
  }));
  app.use(logger('[ :date[web] ] :method :url - :remote-addr', {
    stream: fs.createWriteStream(path.join(__dirname, 'access.log'), {
      flags: 'a'
    })
  }));
}

app.use(cors({
  origin: '*'
})); // app.options('*', (req: Request, res: Response) => {
// 	res.header('Access-Control-Allow-Origin', '*')
// 	res.header('Access-Control-Allow-Methods', '*')
// 	res.header('Access-Control-Allow-Headers', '*')
// 	//res.header('Access-Control-Allow-Credentials', '*')
// 	console.log('PREFLIGHT')
// 	res.end()
// })

app.use(express.json());
app.use(express.urlencoded({
  extended: true
}));
app.use('/user', usersRouter);
app.use('/document', docRouter);
app.use('/message', messageRouter);
app.use('/', indexRouter); // error handler
// eslint-disable-next-line no-unused-vars

app.use(function (err, req, res, next) {
  (0, _error.handleError)(err, res);
});
app.use(function (req, res) {
  res.status(404).json({
    error: 'Route not found'
  });
});
module.exports = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJwYXRoIiwibG9nZ2VyIiwiY29tcHJlc3Npb24iLCJoZWxtZXQiLCJtb25nb29zZSIsImZzIiwiand0IiwiY29ycyIsImNvbmZpZyIsImluZGV4Um91dGVyIiwidXNlcnNSb3V0ZXIiLCJkb2NSb3V0ZXIiLCJtZXNzYWdlUm91dGVyIiwiYXBwIiwiY29ubmVjdCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkRCX1BBVEhfVEVTVCIsIkRCX1BBVEgiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ1c2VGaW5kQW5kTW9kaWZ5IiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsImV4aXQiLCJzZXQiLCJ1c2UiLCJza2lwIiwicmVxIiwicmVzIiwic3RhdHVzQ29kZSIsInN0cmVhbSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiam9pbiIsIl9fZGlybmFtZSIsImZsYWdzIiwib3JpZ2luIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImVyciIsIm5leHQiLCJzdGF0dXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUVBLElBQUlBLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBQ0EsSUFBSUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFsQjs7QUFDQSxJQUFJRSxNQUFNLEdBQUdGLE9BQU8sQ0FBQyxRQUFELENBQXBCLEMsQ0FFQTs7O0FBQ0EsSUFBSUcsV0FBVyxHQUFHSCxPQUFPLENBQUMsYUFBRCxDQUF6QixDLENBQ0E7OztBQUNBLElBQUlJLE1BQU0sR0FBR0osT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBQ0EsSUFBSUssUUFBUSxHQUFHTCxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxJQUFJTSxFQUFFLEdBQUdOLE9BQU8sQ0FBQyxJQUFELENBQWhCOztBQUNBLElBQUlP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QTs7QUFDQUksR0FBRyxDQUFDZSxHQUFKLENBQVEsVUFBVWMsR0FBVixFQUE2QlosR0FBN0IsRUFBMkNDLEdBQTNDLEVBQTBEWSxJQUExRCxFQUE4RTtBQUNyRiwwQkFBWUQsR0FBWixFQUFpQlgsR0FBakI7QUFDQSxDQUZEO0FBSUFsQixHQUFHLENBQUNlLEdBQUosQ0FBUSxVQUFDRSxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNyQkEsRUFBQUEsR0FBRyxDQUFDYSxNQUFKLENBQVcsR0FBWCxFQUFnQkwsSUFBaEIsQ0FBcUI7QUFBRWhCLElBQUFBLEtBQUssRUFBRTtBQUFULEdBQXJCO0FBQ0EsQ0FGRDtBQUlBc0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakMsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcydcclxuaW1wb3J0IHsgaGFuZGxlRXJyb3IsIEVycm9ySGFuZGxlciB9IGZyb20gJy4vbGliL2hlbHBlcnMvZXJyb3InO1xyXG5cclxudmFyIGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJylcclxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcclxudmFyIGxvZ2dlciA9IHJlcXVpcmUoJ21vcmdhbicpXHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcclxudmFyIGNvbXByZXNzaW9uID0gcmVxdWlyZSgnY29tcHJlc3Npb24nKVxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcclxudmFyIGhlbG1ldCA9IHJlcXVpcmUoJ2hlbG1ldCcpXHJcbnZhciBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJylcclxudmFyIGZzID0gcmVxdWlyZSgnZnMnKVxyXG52YXIgand0ID0gcmVxdWlyZSgnanNvbndlYnRva2VuJylcclxudmFyIGNvcnMgPSByZXF1aXJlKCdjb3JzJylcclxuXHJcbnJlcXVpcmUoJ2RvdGVudi1kZWZhdWx0cycpLmNvbmZpZygpXHJcblxyXG52YXIgaW5kZXhSb3V0ZXIgPSByZXF1aXJlKCcuL3JvdXRlcy9pbmRleC5yb3V0ZScpXHJcbnZhciB1c2Vyc1JvdXRlciA9IHJlcXVpcmUoJy4vcm91dGVzL3VzZXIucm91dGUnKVxyXG52YXIgZG9jUm91dGVyID0gcmVxdWlyZSgnLi9yb3V0ZXMvZG9jdW1lbnQucm91dGUnKVxyXG52YXIgbWVzc2FnZVJvdXRlciA9IHJlcXVpcmUoJy4vcm91dGVzL21lc3NhZ2Uucm91dGUnKVxyXG5cclxuXHJcbnZhciBhcHAgPSBleHByZXNzKClcclxuXHJcbnRyeSB7XHJcblx0bW9uZ29vc2UuY29ubmVjdChcclxuXHRcdHByb2Nlc3MuZW52Lk5PREVfRU5WID09ICd0ZXN0J1xyXG5cdFx0XHQ/IHByb2Nlc3MuZW52LkRCX1BBVEhfVEVTVFxyXG5cdFx0XHQ6IHByb2Nlc3MuZW52LkRCX1BBVEgsXHJcblx0XHR7XHJcblx0XHRcdHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcclxuXHRcdFx0dXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLFxyXG5cdFx0XHR1c2VGaW5kQW5kTW9kaWZ5OiB0cnVlXHJcblx0XHR9XHJcblx0KVxyXG59IGNhdGNoIChlcnJvcikge1xyXG5cdGNvbnNvbGUuZXJyb3IoZXJyb3IubWVzc2FnZSlcclxuXHRwcm9jZXNzLmV4aXQoMSlcclxufVxyXG5tb25nb29zZS5zZXQoJ3VzZUNyZWF0ZUluZGV4JywgdHJ1ZSlcclxuXHJcbnByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbidcclxuXHQ/IGFwcC51c2UoY29tcHJlc3Npb24oKSkudXNlKGhlbG1ldCgpKVxyXG5cdDogbnVsbFxyXG5cclxuLy8gbG9nZ2luZyBzZXR1cCAoY2hlY2sgaWYgdXNpbmcgdGVzdCBlbnYpXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnKSB7XHJcblx0YXBwLnVzZShcclxuXHRcdGxvZ2dlcignWyA6ZGF0ZVt3ZWJdIF0gOm1ldGhvZCA6dXJsIC0gOnN0YXR1cyBpbiA6cmVzcG9uc2UtdGltZVszXSBtcycsIHtcclxuXHRcdFx0c2tpcDogZnVuY3Rpb24gKHJlcSwgcmVzKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlcy5zdGF0dXNDb2RlIDwgNDAwXHJcblx0XHRcdH0sXHJcblx0XHR9KVxyXG5cdClcclxuXHRhcHAudXNlKFxyXG5cdFx0bG9nZ2VyKCdbIDpkYXRlW3dlYl0gXSA6bWV0aG9kIDp1cmwgLSA6cmVtb3RlLWFkZHInLCB7XHJcblx0XHRcdHN0cmVhbTogZnMuY3JlYXRlV3JpdGVTdHJlYW0ocGF0aC5qb2luKF9fZGlybmFtZSwgJ2FjY2Vzcy5sb2cnKSwge1xyXG5cdFx0XHRcdGZsYWdzOiAnYScsXHJcblx0XHRcdH0pLFxyXG5cdFx0fSlcclxuXHQpXHJcbn1cclxuXHJcbmFwcC51c2UoY29ycyh7IG9yaWdpbjogJyonIH0pKVxyXG4vLyBhcHAub3B0aW9ucygnKicsIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuLy8gXHRyZXMuaGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCAnKicpXHJcbi8vIFx0cmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycsICcqJylcclxuLy8gXHRyZXMuaGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJywgJyonKVxyXG4vLyBcdC8vcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHMnLCAnKicpXHJcbi8vIFx0Y29uc29sZS5sb2coJ1BSRUZMSUdIVCcpXHJcblxyXG4vLyBcdHJlcy5lbmQoKVxyXG4vLyB9KVxyXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKVxyXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKVxyXG5cclxuYXBwLnVzZSgnL3VzZXInLCB1c2Vyc1JvdXRlcilcclxuYXBwLnVzZSgnL2RvY3VtZW50JywgZG9jUm91dGVyKVxyXG5hcHAudXNlKCcvbWVzc2FnZScsIG1lc3NhZ2VSb3V0ZXIpXHJcbmFwcC51c2UoJy8nLCBpbmRleFJvdXRlcilcclxuXHJcbi8vIGVycm9yIGhhbmRsZXJcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXHJcbmFwcC51c2UoZnVuY3Rpb24gKGVycjogRXJyb3JIYW5kbGVyLCByZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xyXG5cdGhhbmRsZUVycm9yKGVyciwgcmVzKVxyXG59KVxyXG5cclxuYXBwLnVzZSgocmVxLCByZXMpID0+IHtcclxuXHRyZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnUm91dGUgbm90IGZvdW5kJyB9KVxyXG59KVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBhcHBcclxuIl19