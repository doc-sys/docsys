"use strict";

var _error = require("./lib/helpers/error");

var express = require('express');

var path = require('path');

var logger = require('morgan'); // eslint-disable-next-line no-unused-vars


var compression = require('compression'); // eslint-disable-next-line no-unused-vars


var helmet = require('helmet');

var mongoose = require('mongoose');

var fs = require('fs');

var jwt = require('jsonwebtoken');

var cors = require('cors');

require('dotenv-defaults').config();

var indexRouter = require('./routes/index');

var usersRouter = require('./routes/user.route');

var docRouter = require('./routes/document.route');

var settingsRouter = require('./routes/settings');

var helperRouter = require('./routes/helper');

var app = express();

try {
  mongoose.connect(process.env.NODE_ENV == 'test' ? process.env.DB_PATH_TEST : process.env.DB_PATH, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  });
} catch (error) {
  console.error(error.message);
  process.exit(1);
}

mongoose.set('useCreateIndex', true);
process.env.NODE_ENV === 'production' ? app.use(compression()).use(helmet()) : null; // logging setup (check if using test env)

if (process.env.NODE_ENV !== 'test') {
  app.use(logger('[ :date[web] ] :method :url - :status in :response-time[3] ms', {
    skip: function skip(req, res) {
      return res.statusCode < 400;
    }
  }));
  app.use(logger('[ :date[web] ] :method :url - :remote-addr', {
    stream: fs.createWriteStream(path.join(__dirname, 'access.log'), {
      flags: 'a'
    })
  }));
}

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({
  extended: true
}));
app.use('/user', usersRouter);
app.use('/document', docRouter);
app.use('/setting', settingsRouter);
app.use('/function', helperRouter);
app.use('/', indexRouter); // error handler
// eslint-disable-next-line no-unused-vars

app.use(function (err, req, res, next) {
  (0, _error.handleError)(err, res);
});
app.use(function (req, res) {
  res.status(404).json({
    error: 'Route not found'
  });
});
module.exports = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJwYXRoIiwibG9nZ2VyIiwiY29tcHJlc3Npb24iLCJoZWxtZXQiLCJtb25nb29zZSIsImZzIiwiand0IiwiY29ycyIsImNvbmZpZyIsImluZGV4Um91dGVyIiwidXNlcnNSb3V0ZXIiLCJkb2NSb3V0ZXIiLCJzZXR0aW5nc1JvdXRlciIsImhlbHBlclJvdXRlciIsImFwcCIsImNvbm5lY3QiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJEQl9QQVRIX1RFU1QiLCJEQl9QQVRIIiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsImV4aXQiLCJzZXQiLCJ1c2UiLCJza2lwIiwicmVxIiwicmVzIiwic3RhdHVzQ29kZSIsInN0cmVhbSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiam9pbiIsIl9fZGlybmFtZSIsImZsYWdzIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImVyciIsIm5leHQiLCJzdGF0dXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUVBLElBQUlBLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBQ0EsSUFBSUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFsQjs7QUFDQSxJQUFJRSxNQUFNLEdBQUdGLE9BQU8sQ0FBQyxRQUFELENBQXBCLEMsQ0FFQTs7O0FBQ0EsSUFBSUcsV0FBVyxHQUFHSCxPQUFPLENBQUMsYUFBRCxDQUF6QixDLENBQ0E7OztBQUNBLElBQUlJLE1BQU0sR0FBR0osT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBQ0EsSUFBSUssUUFBUSxHQUFHTCxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxJQUFJTSxFQUFFLEdBQUdOLE9BQU8sQ0FBQyxJQUFELENBQWhCOztBQUNBLElBQUlPLEdBQUcsR0FBR1As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VWEsR0FBVixFQUE2QlgsR0FBN0IsRUFBMkNDLEdBQTNDLEVBQTBEVyxJQUExRCxFQUE4RTtBQUNyRiwwQkFBWUQsR0FBWixFQUFpQlYsR0FBakI7QUFDQSxDQUZEO0FBSUFqQixHQUFHLENBQUNjLEdBQUosQ0FBUSxVQUFDRSxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNyQkEsRUFBQUEsR0FBRyxDQUFDWSxNQUFKLENBQVcsR0FBWCxFQUFnQkwsSUFBaEIsQ0FBcUI7QUFBRWYsSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBckI7QUFDQSxDQUZEO0FBSUFxQixNQUFNLENBQUNDLE9BQVAsR0FBaUIvQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24gfSBmcm9tICdleHByZXNzJ1xyXG5pbXBvcnQgeyBoYW5kbGVFcnJvciwgRXJyb3JIYW5kbGVyIH0gZnJvbSAnLi9saWIvaGVscGVycy9lcnJvcic7XHJcblxyXG52YXIgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxyXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxyXG52YXIgbG9nZ2VyID0gcmVxdWlyZSgnbW9yZ2FuJylcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xyXG52YXIgY29tcHJlc3Npb24gPSByZXF1aXJlKCdjb21wcmVzc2lvbicpXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xyXG52YXIgaGVsbWV0ID0gcmVxdWlyZSgnaGVsbWV0JylcclxudmFyIG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKVxyXG52YXIgZnMgPSByZXF1aXJlKCdmcycpXHJcbnZhciBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKVxyXG52YXIgY29ycyA9IHJlcXVpcmUoJ2NvcnMnKVxyXG5cclxucmVxdWlyZSgnZG90ZW52LWRlZmF1bHRzJykuY29uZmlnKClcclxuXHJcbnZhciBpbmRleFJvdXRlciA9IHJlcXVpcmUoJy4vcm91dGVzL2luZGV4JylcclxudmFyIHVzZXJzUm91dGVyID0gcmVxdWlyZSgnLi9yb3V0ZXMvdXNlci5yb3V0ZScpXHJcbnZhciBkb2NSb3V0ZXIgPSByZXF1aXJlKCcuL3JvdXRlcy9kb2N1bWVudC5yb3V0ZScpXHJcbnZhciBzZXR0aW5nc1JvdXRlciA9IHJlcXVpcmUoJy4vcm91dGVzL3NldHRpbmdzJylcclxudmFyIGhlbHBlclJvdXRlciA9IHJlcXVpcmUoJy4vcm91dGVzL2hlbHBlcicpXHJcblxyXG52YXIgYXBwID0gZXhwcmVzcygpXHJcblxyXG50cnkge1xyXG5cdG1vbmdvb3NlLmNvbm5lY3QoXHJcblx0XHRwcm9jZXNzLmVudi5OT0RFX0VOViA9PSAndGVzdCdcclxuXHRcdFx0PyBwcm9jZXNzLmVudi5EQl9QQVRIX1RFU1RcclxuXHRcdFx0OiBwcm9jZXNzLmVudi5EQl9QQVRILFxyXG5cdFx0e1xyXG5cdFx0XHR1c2VOZXdVcmxQYXJzZXI6IHRydWUsXHJcblx0XHRcdHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcclxuXHRcdH1cclxuXHQpXHJcbn0gY2F0Y2ggKGVycm9yKSB7XHJcblx0Y29uc29sZS5lcnJvcihlcnJvci5tZXNzYWdlKVxyXG5cdHByb2Nlc3MuZXhpdCgxKVxyXG59XHJcbm1vbmdvb3NlLnNldCgndXNlQ3JlYXRlSW5kZXgnLCB0cnVlKVxyXG5cclxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xyXG5cdD8gYXBwLnVzZShjb21wcmVzc2lvbigpKS51c2UoaGVsbWV0KCkpXHJcblx0OiBudWxsXHJcblxyXG4vLyBsb2dnaW5nIHNldHVwIChjaGVjayBpZiB1c2luZyB0ZXN0IGVudilcclxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcpIHtcclxuXHRhcHAudXNlKFxyXG5cdFx0bG9nZ2VyKCdbIDpkYXRlW3dlYl0gXSA6bWV0aG9kIDp1cmwgLSA6c3RhdHVzIGluIDpyZXNwb25zZS10aW1lWzNdIG1zJywge1xyXG5cdFx0XHRza2lwOiBmdW5jdGlvbiAocmVxLCByZXMpIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVzLnN0YXR1c0NvZGUgPCA0MDBcclxuXHRcdFx0fSxcclxuXHRcdH0pXHJcblx0KVxyXG5cdGFwcC51c2UoXHJcblx0XHRsb2dnZXIoJ1sgOmRhdGVbd2ViXSBdIDptZXRob2QgOnVybCAtIDpyZW1vdGUtYWRkcicsIHtcclxuXHRcdFx0c3RyZWFtOiBmcy5jcmVhdGVXcml0ZVN0cmVhbShwYXRoLmpvaW4oX19kaXJuYW1lLCAnYWNjZXNzLmxvZycpLCB7XHJcblx0XHRcdFx0ZmxhZ3M6ICdhJyxcclxuXHRcdFx0fSksXHJcblx0XHR9KVxyXG5cdClcclxufVxyXG5cclxuYXBwLnVzZShjb3JzKCkpXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpXHJcbmFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpXHJcblxyXG5hcHAudXNlKCcvdXNlcicsIHVzZXJzUm91dGVyKVxyXG5hcHAudXNlKCcvZG9jdW1lbnQnLCBkb2NSb3V0ZXIpXHJcbmFwcC51c2UoJy9zZXR0aW5nJywgc2V0dGluZ3NSb3V0ZXIpXHJcbmFwcC51c2UoJy9mdW5jdGlvbicsIGhlbHBlclJvdXRlcilcclxuYXBwLnVzZSgnLycsIGluZGV4Um91dGVyKVxyXG5cclxuLy8gZXJyb3IgaGFuZGxlclxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcclxuYXBwLnVzZShmdW5jdGlvbiAoZXJyOiBFcnJvckhhbmRsZXIsIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XHJcblx0aGFuZGxlRXJyb3IoZXJyLCByZXMpXHJcbn0pXHJcblxyXG5hcHAudXNlKChyZXEsIHJlcykgPT4ge1xyXG5cdHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdSb3V0ZSBub3QgZm91bmQnIH0pXHJcbn0pXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGFwcFxyXG4iXX0=