"use strict";

var _error = require("./lib/helpers/error");

var express = require('express');

var path = require('path');

var logger = require('morgan'); // eslint-disable-next-line no-unused-vars


var compression = require('compression'); // eslint-disable-next-line no-unused-vars


var helmet = require('helmet');

var mongoose = require('mongoose');

var fs = require('fs');

var jwt = require('jsonwebtoken');

var cors = require('cors');

require('dotenv-defaults').config();

var indexRouter = require('./routes/index.route');

var usersRouter = require('./routes/user.route');

var docRouter = require('./routes/document.route');

var app = express();

try {
  mongoose.connect(process.env.NODE_ENV == 'test' ? process.env.DB_PATH_TEST : process.env.DB_PATH, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  });
} catch (error) {
  console.error(error.message);
  process.exit(1);
}

mongoose.set('useCreateIndex', true);
process.env.NODE_ENV === 'production' ? app.use(compression()).use(helmet()) : null; // logging setup (check if using test env)

if (process.env.NODE_ENV !== 'test') {
  app.use(logger('[ :date[web] ] :method :url - :status in :response-time[3] ms', {
    skip: function skip(req, res) {
      return res.statusCode < 400;
    }
  }));
  app.use(logger('[ :date[web] ] :method :url - :remote-addr', {
    stream: fs.createWriteStream(path.join(__dirname, 'access.log'), {
      flags: 'a'
    })
  }));
}

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({
  extended: true
}));
app.use('/user', usersRouter);
app.use('/document', docRouter);
app.use('/', indexRouter); // error handler
// eslint-disable-next-line no-unused-vars

app.use(function (err, req, res, next) {
  (0, _error.handleError)(err, res);
});
app.use(function (req, res) {
  res.status(404).json({
    error: 'Route not found'
  });
});
module.exports = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJwYXRoIiwibG9nZ2VyIiwiY29tcHJlc3Npb24iLCJoZWxtZXQiLCJtb25nb29zZSIsImZzIiwiand0IiwiY29ycyIsImNvbmZpZyIsImluZGV4Um91dGVyIiwidXNlcnNSb3V0ZXIiLCJkb2NSb3V0ZXIiLCJhcHAiLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiREJfUEFUSF9URVNUIiwiREJfUEFUSCIsInVzZU5ld1VybFBhcnNlciIsInVzZVVuaWZpZWRUb3BvbG9neSIsImVycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJleGl0Iiwic2V0IiwidXNlIiwic2tpcCIsInJlcSIsInJlcyIsInN0YXR1c0NvZGUiLCJzdHJlYW0iLCJjcmVhdGVXcml0ZVN0cmVhbSIsImpvaW4iLCJfX2Rpcm5hbWUiLCJmbGFncyIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJlcnIiLCJuZXh0Iiwic3RhdHVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFFQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLElBQUlDLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBbEI7O0FBQ0EsSUFBSUUsTUFBTSxHQUFHRixPQUFPLENBQUMsUUFBRCxDQUFwQixDLENBRUE7OztBQUNBLElBQUlHLFdBQVcsR0FBR0gsT0FBTyxDQUFDLGFBQUQsQ0FBekIsQyxDQUNBOzs7QUFDQSxJQUFJSSxNQUFNLEdBQUdKLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUNBLElBQUlLLFFBQVEsR0FBR0wsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBQ0EsSUFBSU0sRUFBRSxHQUFHTixPQUFPLENBQUMsSUFBRCxDQUFoQjs7QUFDQSxJQUFJTyxHQUFHLEdBQUdQLE9BQU8sQ0FBQyxjQUFELENBQWpCOztBQUNBLElBQUlR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QUFBLEtBQUssRUFBRTtBQUFULEdBQXJCO0FBQ0EsQ0FGRDtBQUlBcUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCL0IsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcydcclxuaW1wb3J0IHsgaGFuZGxlRXJyb3IsIEVycm9ySGFuZGxlciB9IGZyb20gJy4vbGliL2hlbHBlcnMvZXJyb3InO1xyXG5cclxudmFyIGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJylcclxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcclxudmFyIGxvZ2dlciA9IHJlcXVpcmUoJ21vcmdhbicpXHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcclxudmFyIGNvbXByZXNzaW9uID0gcmVxdWlyZSgnY29tcHJlc3Npb24nKVxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcclxudmFyIGhlbG1ldCA9IHJlcXVpcmUoJ2hlbG1ldCcpXHJcbnZhciBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJylcclxudmFyIGZzID0gcmVxdWlyZSgnZnMnKVxyXG52YXIgand0ID0gcmVxdWlyZSgnanNvbndlYnRva2VuJylcclxudmFyIGNvcnMgPSByZXF1aXJlKCdjb3JzJylcclxuXHJcbnJlcXVpcmUoJ2RvdGVudi1kZWZhdWx0cycpLmNvbmZpZygpXHJcblxyXG52YXIgaW5kZXhSb3V0ZXIgPSByZXF1aXJlKCcuL3JvdXRlcy9pbmRleC5yb3V0ZScpXHJcbnZhciB1c2Vyc1JvdXRlciA9IHJlcXVpcmUoJy4vcm91dGVzL3VzZXIucm91dGUnKVxyXG52YXIgZG9jUm91dGVyID0gcmVxdWlyZSgnLi9yb3V0ZXMvZG9jdW1lbnQucm91dGUnKVxyXG5cclxuXHJcbnZhciBhcHAgPSBleHByZXNzKClcclxuXHJcbnRyeSB7XHJcblx0bW9uZ29vc2UuY29ubmVjdChcclxuXHRcdHByb2Nlc3MuZW52Lk5PREVfRU5WID09ICd0ZXN0J1xyXG5cdFx0XHQ/IHByb2Nlc3MuZW52LkRCX1BBVEhfVEVTVFxyXG5cdFx0XHQ6IHByb2Nlc3MuZW52LkRCX1BBVEgsXHJcblx0XHR7XHJcblx0XHRcdHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcclxuXHRcdFx0dXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLFxyXG5cdFx0fVxyXG5cdClcclxufSBjYXRjaCAoZXJyb3IpIHtcclxuXHRjb25zb2xlLmVycm9yKGVycm9yLm1lc3NhZ2UpXHJcblx0cHJvY2Vzcy5leGl0KDEpXHJcbn1cclxubW9uZ29vc2Uuc2V0KCd1c2VDcmVhdGVJbmRleCcsIHRydWUpXHJcblxyXG5wcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXHJcblx0PyBhcHAudXNlKGNvbXByZXNzaW9uKCkpLnVzZShoZWxtZXQoKSlcclxuXHQ6IG51bGxcclxuXHJcbi8vIGxvZ2dpbmcgc2V0dXAgKGNoZWNrIGlmIHVzaW5nIHRlc3QgZW52KVxyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0Jykge1xyXG5cdGFwcC51c2UoXHJcblx0XHRsb2dnZXIoJ1sgOmRhdGVbd2ViXSBdIDptZXRob2QgOnVybCAtIDpzdGF0dXMgaW4gOnJlc3BvbnNlLXRpbWVbM10gbXMnLCB7XHJcblx0XHRcdHNraXA6IGZ1bmN0aW9uIChyZXEsIHJlcykge1xyXG5cdFx0XHRcdHJldHVybiByZXMuc3RhdHVzQ29kZSA8IDQwMFxyXG5cdFx0XHR9LFxyXG5cdFx0fSlcclxuXHQpXHJcblx0YXBwLnVzZShcclxuXHRcdGxvZ2dlcignWyA6ZGF0ZVt3ZWJdIF0gOm1ldGhvZCA6dXJsIC0gOnJlbW90ZS1hZGRyJywge1xyXG5cdFx0XHRzdHJlYW06IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKHBhdGguam9pbihfX2Rpcm5hbWUsICdhY2Nlc3MubG9nJyksIHtcclxuXHRcdFx0XHRmbGFnczogJ2EnLFxyXG5cdFx0XHR9KSxcclxuXHRcdH0pXHJcblx0KVxyXG59XHJcblxyXG5hcHAudXNlKGNvcnMoKSlcclxuYXBwLnVzZShleHByZXNzLmpzb24oKSlcclxuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSlcclxuXHJcbmFwcC51c2UoJy91c2VyJywgdXNlcnNSb3V0ZXIpXHJcbmFwcC51c2UoJy9kb2N1bWVudCcsIGRvY1JvdXRlcilcclxuYXBwLnVzZSgnLycsIGluZGV4Um91dGVyKVxyXG5cclxuLy8gZXJyb3IgaGFuZGxlclxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcclxuYXBwLnVzZShmdW5jdGlvbiAoZXJyOiBFcnJvckhhbmRsZXIsIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XHJcblx0aGFuZGxlRXJyb3IoZXJyLCByZXMpXHJcbn0pXHJcblxyXG5hcHAudXNlKChyZXEsIHJlcykgPT4ge1xyXG5cdHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdSb3V0ZSBub3QgZm91bmQnIH0pXHJcbn0pXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGFwcFxyXG4iXX0=