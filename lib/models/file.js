"use strict";

var mongoose = require('mongoose');

var file = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  created: {
    type: Date,
    "default": Date.now()
  },
  dated: {
    type: Date
  },
  content: {
    type: String
  },
  keywords: {
    type: [String],
    minlength: 3
  },
  fileId: {
    type: String,
    unique: true
  },
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  sharedWith: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    "default": []
  }],
  lockedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    "default": null
  },
  locked: {
    type: Boolean,
    "default": false
  },
  mime: {
    type: String
  },
  extension: {
    type: String
  },
  fileStorageId: String,
  log: [{
    timestamp: {
      type: Date,
      "default": Date.now()
    },
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: true
    },
    message: {
      type: String,
      required: true
    }
  }]
});

var handleE11000 = function handleE11000(error, res, next) {
  if (error.name === 'MongoError' && error.code === 11000) {
    next(new Error('File already exists'));
  } else {
    next();
  }
};

file.post('save', handleE11000);
file.post('update', handleE11000);
file.post('findOneAndUpdate', handleE11000);
file.post('insertMany', handleE11000);
module.exports = {
  File: mongoose.model('File', file)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvZmlsZS5qcyJdLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJmaWxlIiwiU2NoZW1hIiwidGl0bGUiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJjcmVhdGVkIiwiRGF0ZSIsIm5vdyIsImRhdGVkIiwiY29udGVudCIsImtleXdvcmRzIiwibWlubGVuZ3RoIiwiZmlsZUlkIiwidW5pcXVlIiwib3duZXIiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwic2hhcmVkV2l0aCIsImxvY2tlZEJ5IiwibG9ja2VkIiwiQm9vbGVhbiIsIm1pbWUiLCJleHRlbnNpb24iLCJmaWxlU3RvcmFnZUlkIiwibG9nIiwidGltZXN0YW1wIiwidXNlciIsIm1lc3NhZ2UiLCJoYW5kbGVFMTEwMDAiLCJlcnJvciIsInJlcyIsIm5leHQiLCJuYW1lIiwiY29kZSIsIkVycm9yIiwicG9zdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJGaWxlIiwibW9kZWwiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFFQSxJQUFJQyxJQUFJLEdBQUcsSUFBSUYsUUFBUSxDQUFDRyxNQUFiLENBQW9CO0FBQzlCQyxFQUFBQSxLQUFLLEVBQUU7QUFDTkMsSUFBQUEsSUFBSSxFQUFFQyxNQURBO0FBRU5DLElBQUFBLFFBQVEsRUFBRTtBQUZKLEdBRHVCO0FBSzlCQyxFQUFBQSxPQUFPLEVBQUU7QUFDUkgsSUFBQUEsSUFBSSxFQUFFSSxJQURFO0FBRVIsZUFBU0EsSUFBSSxDQUFDQyxHQUFMO0FBRkQsR0FMcUI7QUFTOUJDLEVBQUFBLEtBQUssRUFBRTtBQUNOTixJQUFBQSxJQUFJLEVBQUVJO0FBREEsR0FUdUI7QUFZOUJHLEVBQUFBLE9BQU8sRUFBRTtBQUNSUCxJQUFBQSxJQUFJLEVBQUVDO0FBREUsR0FacUI7QUFlOUJPLEVBQUFBLFFBQVEsRUFBRTtBQUNUUixJQUFBQSxJQUFJLEVBQUUsQ0FBQ0MsTUFBRCxDQURHO0FBRVRRLElBQUFBLFNBQVMsRUFBRTtBQUZGLEdBZm9CO0FBbUI5QkMsRUFBQUEsTUFBTSxFQUFFO0FBQ1BWLElBQUFBLElBQUksRUFBRUMsTUFEQztBQUVQVSxJQUFBQSxNQUFNLEVBQUU7QUFGRCxHQW5Cc0I7QUF1QjlCQyxFQUFBQSxLQUFLLEVBQUU7QUFDTlosSUFBQUEsSUFBSSxFQUFFTCxRQUFRLENBQUNHLE1BQVQsQ0FBZ0JlLEtBQWhCLENBQXNCQyxRQUR0QjtBQUVOQyxJQUFBQSxHQUFHLEVBQUUsTUFGQztBQUdOYixJQUFBQSxRQUFRLEVBQUU7QUFISixHQXZCdUI7QUE0QjlCYyxFQUFBQSxVQUFVLEVBQUUsQ0FDWDtBQUNDaEIsSUFBQUEsSUFBSSxFQUFFTCxRQUFRLENBQUNHLE1BQVQsQ0FBZ0JlLEtBQWhCLENBQXNCQyxRQUQ3QjtBQUVDQyxJQUFBQSxHQUFHLEVBQUUsTUFGTjtBQUdDLGVBQVM7QUFIVixHQURXLENBNUJrQjtBQW1DOUJFLEVBQUFBLFFBQVEsRUFBRTtBQUNUakIsSUFBQUEsSUFBSSxFQUFFTCxRQUFRLENBQUNHLE1BQVQsQ0FBZ0JlLEtBQWhCLENBQXNCQyxRQURuQjtBQUVUQyxJQUFBQSxHQUFHLEVBQUUsTUFGSTtBQUdULGVBQVM7QUFIQSxHQW5Db0I7QUF3QzlCRyxFQUFBQSxNQUFNLEVBQUU7QUFDUGxCLElBQUFBLElBQUksRUFBRW1CLE9BREM7QUFFUCxlQUFTO0FBRkYsR0F4Q3NCO0FBNEM5QkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0xwQixJQUFBQSxJQUFJLEVBQUVDO0FBREQsR0E1Q3dCO0FBK0M5Qm9CLEVBQUFBLFNBQVMsRUFBRTtBQUNWckIsSUFBQUEsSUFBSSxFQUFFQztBQURJLEdBL0NtQjtBQWtEOUJxQixFQUFBQSxhQUFhLEVBQUVyQixNQWxEZTtBQW1EOUJzQixFQUFBQSxHQUFHLEVBQUUsQ0FDSjtBQUNDQyxJQUFBQSxTQUFTLEVBQUU7QUFDVnhCLE1BQUFBLElBQUksRUFBRUksSUFESTtBQUVWLGlCQUFTQSxJQUFJLENBQUNDLEdBQUw7QUFGQyxLQURaO0FBS0NvQixJQUFBQSxJQUFJLEVBQUU7QUFDTHpCLE1BQUFBLElBQUksRUFBRUwsUUFBUSxDQUFDRyxNQUFULENBQWdCZSxLQUFoQixDQUFzQkMsUUFEdkI7QUFFTEMsTUFBQUEsR0FBRyxFQUFFLE1BRkE7QUFHTGIsTUFBQUEsUUFBUSxFQUFFO0FBSEwsS0FMUDtBQVVDd0IsSUFBQUEsT0FBTyxFQUFFO0FBQ1IxQixNQUFBQSxJQUFJLEVBQUVDLE1BREU7QUFFUkMsTUFBQUEsUUFBUSxFQUFFO0FBRkY7QUFWVixHQURJO0FBbkR5QixDQUFwQixDQUFYOztBQXNFQSxJQUFJeUIsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBVUMsS0FBVixFQUFpQkMsR0FBakIsRUFBc0JDLElBQXRCLEVBQTRCO0FBQzlDLE1BQUlGLEtBQUssQ0FBQ0csSUFBTixLQUFlLFlBQWYsSUFBK0JILEtBQUssQ0FBQ0ksSUFBTixLQUFlLEtBQWxELEVBQXlEO0FBQ3hERixJQUFBQSxJQUFJLENBQUMsSUFBSUcsS0FBSixDQUFVLHFCQUFWLENBQUQsQ0FBSjtBQUNBLEdBRkQsTUFFTztBQUNOSCxJQUFBQSxJQUFJO0FBQ0o7QUFDRCxDQU5EOztBQVFBakMsSUFBSSxDQUFDcUMsSUFBTCxDQUFVLE1BQVYsRUFBa0JQLFlBQWxCO0FBQ0E5QixJQUFJLENBQUNxQyxJQUFMLENBQVUsUUFBVixFQUFvQlAsWUFBcEI7QUFDQTlCLElBQUksQ0FBQ3FDLElBQUwsQ0FBVSxrQkFBVixFQUE4QlAsWUFBOUI7QUFDQTlCLElBQUksQ0FBQ3FDLElBQUwsQ0FBVSxZQUFWLEVBQXdCUCxZQUF4QjtBQUVBUSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFBRUMsRUFBQUEsSUFBSSxFQUFFMUMsUUFBUSxDQUFDMkMsS0FBVCxDQUFlLE1BQWYsRUFBdUJ6QyxJQUF2QjtBQUFSLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKVxyXG5cclxubGV0IGZpbGUgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcclxuXHR0aXRsZToge1xyXG5cdFx0dHlwZTogU3RyaW5nLFxyXG5cdFx0cmVxdWlyZWQ6IHRydWUsXHJcblx0fSxcclxuXHRjcmVhdGVkOiB7XHJcblx0XHR0eXBlOiBEYXRlLFxyXG5cdFx0ZGVmYXVsdDogRGF0ZS5ub3coKSxcclxuXHR9LFxyXG5cdGRhdGVkOiB7XHJcblx0XHR0eXBlOiBEYXRlLFxyXG5cdH0sXHJcblx0Y29udGVudDoge1xyXG5cdFx0dHlwZTogU3RyaW5nLFxyXG5cdH0sXHJcblx0a2V5d29yZHM6IHtcclxuXHRcdHR5cGU6IFtTdHJpbmddLFxyXG5cdFx0bWlubGVuZ3RoOiAzLFxyXG5cdH0sXHJcblx0ZmlsZUlkOiB7XHJcblx0XHR0eXBlOiBTdHJpbmcsXHJcblx0XHR1bmlxdWU6IHRydWUsXHJcblx0fSxcclxuXHRvd25lcjoge1xyXG5cdFx0dHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG5cdFx0cmVmOiAnVXNlcicsXHJcblx0XHRyZXF1aXJlZDogdHJ1ZSxcclxuXHR9LFxyXG5cdHNoYXJlZFdpdGg6IFtcclxuXHRcdHtcclxuXHRcdFx0dHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG5cdFx0XHRyZWY6ICdVc2VyJyxcclxuXHRcdFx0ZGVmYXVsdDogW10sXHJcblx0XHR9LFxyXG5cdF0sXHJcblx0bG9ja2VkQnk6IHtcclxuXHRcdHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuXHRcdHJlZjogJ1VzZXInLFxyXG5cdFx0ZGVmYXVsdDogbnVsbCxcclxuXHR9LFxyXG5cdGxvY2tlZDoge1xyXG5cdFx0dHlwZTogQm9vbGVhbixcclxuXHRcdGRlZmF1bHQ6IGZhbHNlLFxyXG5cdH0sXHJcblx0bWltZToge1xyXG5cdFx0dHlwZTogU3RyaW5nLFxyXG5cdH0sXHJcblx0ZXh0ZW5zaW9uOiB7XHJcblx0XHR0eXBlOiBTdHJpbmcsXHJcblx0fSxcclxuXHRmaWxlU3RvcmFnZUlkOiBTdHJpbmcsXHJcblx0bG9nOiBbXHJcblx0XHR7XHJcblx0XHRcdHRpbWVzdGFtcDoge1xyXG5cdFx0XHRcdHR5cGU6IERhdGUsXHJcblx0XHRcdFx0ZGVmYXVsdDogRGF0ZS5ub3coKSxcclxuXHRcdFx0fSxcclxuXHRcdFx0dXNlcjoge1xyXG5cdFx0XHRcdHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuXHRcdFx0XHRyZWY6ICdVc2VyJyxcclxuXHRcdFx0XHRyZXF1aXJlZDogdHJ1ZSxcclxuXHRcdFx0fSxcclxuXHRcdFx0bWVzc2FnZToge1xyXG5cdFx0XHRcdHR5cGU6IFN0cmluZyxcclxuXHRcdFx0XHRyZXF1aXJlZDogdHJ1ZSxcclxuXHRcdFx0fSxcclxuXHRcdH0sXHJcblx0XSxcclxufSlcclxuXHJcbnZhciBoYW5kbGVFMTEwMDAgPSBmdW5jdGlvbiAoZXJyb3IsIHJlcywgbmV4dCkge1xyXG5cdGlmIChlcnJvci5uYW1lID09PSAnTW9uZ29FcnJvcicgJiYgZXJyb3IuY29kZSA9PT0gMTEwMDApIHtcclxuXHRcdG5leHQobmV3IEVycm9yKCdGaWxlIGFscmVhZHkgZXhpc3RzJykpXHJcblx0fSBlbHNlIHtcclxuXHRcdG5leHQoKVxyXG5cdH1cclxufVxyXG5cclxuZmlsZS5wb3N0KCdzYXZlJywgaGFuZGxlRTExMDAwKVxyXG5maWxlLnBvc3QoJ3VwZGF0ZScsIGhhbmRsZUUxMTAwMClcclxuZmlsZS5wb3N0KCdmaW5kT25lQW5kVXBkYXRlJywgaGFuZGxlRTExMDAwKVxyXG5maWxlLnBvc3QoJ2luc2VydE1hbnknLCBoYW5kbGVFMTEwMDApXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHsgRmlsZTogbW9uZ29vc2UubW9kZWwoJ0ZpbGUnLCBmaWxlKSB9XHJcbiJdfQ==