"use strict";

var mongoose = require('mongoose');

var file = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  created: {
    type: Date,
    "default": function _default() {
      return Date.now();
    }
  },
  dated: {
    type: Date
  },
  content: {
    type: String
  },
  keywords: {
    type: [String],
    minlength: 3
  },
  fileId: {
    type: String,
    unique: true
  },
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  sharedWith: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    "default": []
  }],
  lockedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    "default": null
  },
  locked: {
    type: Boolean,
    "default": false
  },
  mime: {
    type: String
  },
  extension: {
    type: String
  },
  fileStorageId: String,
  log: [{
    timestamp: {
      type: Date,
      "default": function _default() {
        return Date.now();
      }
    },
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: true
    },
    logType: {
      type: String,
      required: false
    },
    message: {
      type: String,
      required: true
    }
  }]
});

var handleE11000 = function handleE11000(error, res, next) {
  if (error.name === 'MongoError' && error.code === 11000) {
    next(new Error('File already exists'));
  } else {
    next();
  }
};

file.post('save', handleE11000);
file.post('update', handleE11000);
file.post('findOneAndUpdate', handleE11000);
file.post('insertMany', handleE11000);
module.exports = {
  File: mongoose.model('File', file)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvZmlsZS5qcyJdLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJmaWxlIiwiU2NoZW1hIiwidGl0bGUiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJjcmVhdGVkIiwiRGF0ZSIsIm5vdyIsImRhdGVkIiwiY29udGVudCIsImtleXdvcmRzIiwibWlubGVuZ3RoIiwiZmlsZUlkIiwidW5pcXVlIiwib3duZXIiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwic2hhcmVkV2l0aCIsImxvY2tlZEJ5IiwibG9ja2VkIiwiQm9vbGVhbiIsIm1pbWUiLCJleHRlbnNpb24iLCJmaWxlU3RvcmFnZUlkIiwibG9nIiwidGltZXN0YW1wIiwidXNlciIsImxvZ1R5cGUiLCJtZXNzYWdlIiwiaGFuZGxlRTExMDAwIiwiZXJyb3IiLCJyZXMiLCJuZXh0IiwibmFtZSIsImNvZGUiLCJFcnJvciIsInBvc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiRmlsZSIsIm1vZGVsIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBRUEsSUFBSUMsSUFBSSxHQUFHLElBQUlGLFFBQVEsQ0FBQ0csTUFBYixDQUFvQjtBQUM5QkMsRUFBQUEsS0FBSyxFQUFFO0FBQ05DLElBQUFBLElBQUksRUFBRUMsTUFEQTtBQUVOQyxJQUFBQSxRQUFRLEVBQUU7QUFGSixHQUR1QjtBQUs5QkMsRUFBQUEsT0FBTyxFQUFFO0FBQ1JILElBQUFBLElBQUksRUFBRUksSUFERTtBQUVSLGVBQVM7QUFBQSxhQUFNQSxJQUFJLENBQUNDLEdBQUwsRUFBTjtBQUFBO0FBRkQsR0FMcUI7QUFTOUJDLEVBQUFBLEtBQUssRUFBRTtBQUNOTixJQUFBQSxJQUFJLEVBQUVJO0FBREEsR0FUdUI7QUFZOUJHLEVBQUFBLE9BQU8sRUFBRTtBQUNSUCxJQUFBQSxJQUFJLEVBQUVDO0FBREUsR0FacUI7QUFlOUJPLEVBQUFBLFFB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LElBQUksRUFBRTNDLFFBQVEsQ0FBQzRDLEtBQVQsQ0FBZSxNQUFmLEVBQXVCMUMsSUFBdkI7QUFBUixDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImxldCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJylcclxuXHJcbmxldCBmaWxlID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcblx0dGl0bGU6IHtcclxuXHRcdHR5cGU6IFN0cmluZyxcclxuXHRcdHJlcXVpcmVkOiB0cnVlLFxyXG5cdH0sXHJcblx0Y3JlYXRlZDoge1xyXG5cdFx0dHlwZTogRGF0ZSxcclxuXHRcdGRlZmF1bHQ6ICgpID0+IERhdGUubm93KCksXHJcblx0fSxcclxuXHRkYXRlZDoge1xyXG5cdFx0dHlwZTogRGF0ZSxcclxuXHR9LFxyXG5cdGNvbnRlbnQ6IHtcclxuXHRcdHR5cGU6IFN0cmluZyxcclxuXHR9LFxyXG5cdGtleXdvcmRzOiB7XHJcblx0XHR0eXBlOiBbU3RyaW5nXSxcclxuXHRcdG1pbmxlbmd0aDogMyxcclxuXHR9LFxyXG5cdGZpbGVJZDoge1xyXG5cdFx0dHlwZTogU3RyaW5nLFxyXG5cdFx0dW5pcXVlOiB0cnVlLFxyXG5cdH0sXHJcblx0b3duZXI6IHtcclxuXHRcdHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuXHRcdHJlZjogJ1VzZXInLFxyXG5cdFx0cmVxdWlyZWQ6IHRydWUsXHJcblx0fSxcclxuXHRzaGFyZWRXaXRoOiBbXHJcblx0XHR7XHJcblx0XHRcdHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuXHRcdFx0cmVmOiAnVXNlcicsXHJcblx0XHRcdGRlZmF1bHQ6IFtdLFxyXG5cdFx0fSxcclxuXHRdLFxyXG5cdGxvY2tlZEJ5OiB7XHJcblx0XHR0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsXHJcblx0XHRyZWY6ICdVc2VyJyxcclxuXHRcdGRlZmF1bHQ6IG51bGwsXHJcblx0fSxcclxuXHRsb2NrZWQ6IHtcclxuXHRcdHR5cGU6IEJvb2xlYW4sXHJcblx0XHRkZWZhdWx0OiBmYWxzZSxcclxuXHR9LFxyXG5cdG1pbWU6IHtcclxuXHRcdHR5cGU6IFN0cmluZyxcclxuXHR9LFxyXG5cdGV4dGVuc2lvbjoge1xyXG5cdFx0dHlwZTogU3RyaW5nLFxyXG5cdH0sXHJcblx0ZmlsZVN0b3JhZ2VJZDogU3RyaW5nLFxyXG5cdGxvZzogW1xyXG5cdFx0e1xyXG5cdFx0XHR0aW1lc3RhbXA6IHtcclxuXHRcdFx0XHR0eXBlOiBEYXRlLFxyXG5cdFx0XHRcdGRlZmF1bHQ6ICgpID0+IERhdGUubm93KCksXHJcblx0XHRcdH0sXHJcblx0XHRcdHVzZXI6IHtcclxuXHRcdFx0XHR0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsXHJcblx0XHRcdFx0cmVmOiAnVXNlcicsXHJcblx0XHRcdFx0cmVxdWlyZWQ6IHRydWUsXHJcblx0XHRcdH0sXHJcblx0XHRcdGxvZ1R5cGU6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogZmFsc2UgfSxcclxuXHRcdFx0bWVzc2FnZToge1xyXG5cdFx0XHRcdHR5cGU6IFN0cmluZyxcclxuXHRcdFx0XHRyZXF1aXJlZDogdHJ1ZSxcclxuXHRcdFx0fSxcclxuXHRcdH0sXHJcblx0XSxcclxufSlcclxuXHJcbnZhciBoYW5kbGVFMTEwMDAgPSBmdW5jdGlvbiAoZXJyb3IsIHJlcywgbmV4dCkge1xyXG5cdGlmIChlcnJvci5uYW1lID09PSAnTW9uZ29FcnJvcicgJiYgZXJyb3IuY29kZSA9PT0gMTEwMDApIHtcclxuXHRcdG5leHQobmV3IEVycm9yKCdGaWxlIGFscmVhZHkgZXhpc3RzJykpXHJcblx0fSBlbHNlIHtcclxuXHRcdG5leHQoKVxyXG5cdH1cclxufVxyXG5cclxuZmlsZS5wb3N0KCdzYXZlJywgaGFuZGxlRTExMDAwKVxyXG5maWxlLnBvc3QoJ3VwZGF0ZScsIGhhbmRsZUUxMTAwMClcclxuZmlsZS5wb3N0KCdmaW5kT25lQW5kVXBkYXRlJywgaGFuZGxlRTExMDAwKVxyXG5maWxlLnBvc3QoJ2luc2VydE1hbnknLCBoYW5kbGVFMTEwMDApXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHsgRmlsZTogbW9uZ29vc2UubW9kZWwoJ0ZpbGUnLCBmaWxlKSB9XHJcbiJdfQ==