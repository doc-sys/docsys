"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _expressValidator = require("express-validator");

var _authenticate = _interopRequireWildcard(require("../lib/helpers/authenticate"));

var _user = require("../controller/user.controller");

var _userCreateNew = _interopRequireDefault(require("../lib/requestSchemas/user.createNew.json"));

var _userLogin = _interopRequireDefault(require("../lib/requestSchemas/user.login.json"));

var _userUsername = _interopRequireDefault(require("../lib/requestSchemas/user.username.json"));

var _validator = require("../lib/helpers/validator");

var express = require('express');

var multer = require('multer');

var router = express.Router();
var uploadFileHandler = multer({
  storage: multer.memoryStorage()
});
router.route('/')
/**
 * @api {get} /user/ Get All Users
 * @apiName UserNameAutoComplete
 * @apiGroup User
 * @apiDescription Gives back the full user list
 * @apiSuccess {Array} user List of user profiles
 * @apiError (500) {String} InternalError Something went wrong.
 */
.get([_authenticate["default"], _user.getAllUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user
  });
});
router.route('/login')
/**
 * @api {post} /user/login User login
 * @apiName userLogin
 * @apiGroup User
 * @apiDescription Logs user in and returns the user and API token
 * @apiParam {String} username
 * @apiParam {String} password
 * @apiSuccess {Object} user User profile
 * @apiSuccess {String} token API token
 * @apiError (401) {String} LoginFailed
 */
.post([(0, _expressValidator.checkSchema)(_userLogin["default"]), _validator.checkSchemaValidation, _user.authenticateUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user,
    token: res.locals.token
  });
});
router.route('/signup')
/**
 * @api {post} /user/signup User signup
 * @apiName userSignup
 * @apiGroup User
 * @apiDescription Signs user up and logs in automatically
 * @apiParam {String} username Username
 * @apiParam {String} password Password according to policy
 * @apiParam {String} mail Valid email
 * @apiParam {String} displayName Full name
 * @apiSuccess {Object} user User profile
 * @apiSuccess {String} token API token
 * @apiError (500) {String} InternalError Something went wrong during signup. Most likely to be during validation.
 * @apiDeprecated Users should not be allowed to sign up by themselfes but rather be invited to use docSys
 */
.post([(0, _expressValidator.checkSchema)(_userCreateNew["default"]), _validator.checkSchemaValidation, _user.addUser, _user.authenticateUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user,
    token: res.locals.token
  });
});
router.route('/unlock/:username')
/**
     * @api {post} /user/unlock/:username Unlock locked user
     * @apiName userUnlock
     * @apiGroup User
     * @apiDescription Unlocks user and sets login attempts to 0
     * @apiParam {String} username Username
     * @apiSuccess {Object} user User profile
     * @apiError (401) {String} AuthentificationError Not allowed to access ressource
     */
.post([_authenticate["default"], _authenticate.requireAdmin, (0, _expressValidator.checkSchema)(_userUsername["default"]), _validator.checkSchemaValidation, _user.unlockUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user
  });
});
router.route('/:username')
/**
 * @api {get} /user/:username Get single user
 * @apiName userGetSingle
 * @apiGroup User
 * @apiDescription Returns a single user object without password
 * @apiParam {String} username
 * @apiSuccess {Object} user User profile
 * @apiError (401) {String} AuthentificationError Not allowed to access ressource
 */
.get([_authenticate["default"], (0, _expressValidator.checkSchema)(_userUsername["default"]), _validator.checkSchemaValidation, _user.findUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user
  });
})
/**
 * @api {delete} /user/:username Delete user
 * @apiName userDeleteSingle
 * @apiGroup User
 * @apiDescription Deletes a single user
 * @apiParam {String} username
 * @apiSuccess {Object} user Username
 * @apiError (401) {String} AuthentificationError Not allowed to access ressource
 */
["delete"]([_authenticate["default"], _authenticate.requireAdmin, (0, _expressValidator.checkSchema)(_userUsername["default"]), _validator.checkSchemaValidation, _user.deleteUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user
  });
})
/**
 * @api {post} /user/:username Update user
 * @apiName userUpdateSingle
 * @apiGroup User
 * @apiDescription Updates a single user. Changes every property that is set in the request body.
 * @apiParam {String} username
 * @apiSuccess {Object} user Updated user object
 * @apiError (401) {String} AuthentificationError Not allowed to access ressource
 */
.post([_authenticate["default"], uploadFileHandler.single('avatar'), (0, _expressValidator.checkSchema)(_userUsername["default"]), _validator.checkSchemaValidation, _user.updateUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user
  });
});
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,