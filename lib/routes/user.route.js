"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _authenticate = _interopRequireWildcard(require("../lib/helpers/authenticate"));

var _user = require("../controller/user.controller");

var express = require('express');

var router = express.Router();
router.route('/').get([_user.getAllUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user
  });
});
router.route('/:username').get([_authenticate["default"], _user.checkPropertyUsername, _user.findUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user
  });
})["delete"]([_authenticate["default"], _authenticate.requireAdmin, _user.checkPropertyUsername, _user.deleteUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user
  });
}).post([_authenticate["default"], _user.checkPropertyUsername, _user.updateUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user
  });
});
router.route('/login').post([_user.checkPropertyUsername, _user.checkPropertyPassword, _user.authenticateUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user,
    token: res.locals.token
  });
});
router.route('/signup').post([_user.checkPropertyUsername, _user.checkPropertyMail, _user.checkPropertyName, _user.checkPropertyPassword, _user.addUser, _user.authenticateUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user,
    token: res.locals.token
  });
});
router.route('/unlock/:username').post([_authenticate["default"], _authenticate.requireAdmin, _user.checkPropertyUsername, _user.unlockUser], function (req, res) {
  res.status(200).json({
    user: res.locals.user
  });
});
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXMvdXNlci5yb3V0ZS50cyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInJvdXRlciIsIlJvdXRlciIsInJvdXRlIiwiZ2V0IiwiZ2V0QWxsVXNlciIsInJlcSIsInJlcyIsInN0YXR1cyIsImpzb24iLCJ1c2VyIiwibG9jYWxzIiwiYXV0aGVudGljYXRlIiwiY2hlY2tQcm9wZXJ0eVVzZXJuYW1lIiwiZmluZFVzZXIiLCJyZXF1aXJlQWRtaW4iLCJkZWxldGVVc2VyIiwicG9zdCIsInVwZGF0ZVVzZXIiLCJjaGVja1Byb3BlcnR5UGFzc3dvcmQiLCJhdXRoZW50aWNhdGVVc2VyIiwidG9rZW4iLCJjaGVja1Byb3BlcnR5TWFpbCIsImNoZWNrUHJvcGVydHlOYW1lIiwiYWRkVXNlciIsInVubG9ja1VzZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBRUE7O0FBQ0E7O0FBSEEsSUFBSUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUFyQjs7QUFLQSxJQUFJQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0csTUFBUixFQUFiO0FBRUFELE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLEdBQWIsRUFBa0JDLEdBQWxCLENBQXNCLENBQUNDLGdCQUFELENBQXRCLEVBQW9DLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQzlDQSxFQUFBQSxHQUFHLENBQUNDLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUFFQyxJQUFBQSxJQUFJLEVBQUVILEdBQUcsQ0FBQ0ksTUFBSixDQUFXRDtBQUFuQixHQUFyQjtBQUNILENBRkQ7QUFJQVQsTUFBTSxDQUFDRSxLQUFQLENBQWEsWUFBYixFQUEyQkMsR0FBM0IsQ0FBK0IsQ0FBQ1Esd0JBQUQsRUFBZUMsMkJBQWYsRUFBc0NDLGNBQXRDLENBQS9CLEVBQWdGLFVBQUNSLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQzFGQSxFQUFBQSxHQUFHLENBQUNDLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUFFQyxJQUFBQSxJQUFJLEVBQUVILEdBQUcsQ0FBQ0ksTUFBSixDQUFXRDtBQUFuQixHQUFyQjtBQUNILENBRkQsWUFFVSxDQUFDRSx3QkFBRCxFQUFlRywwQkFBZixFQUE2QkYsMkJBQTdCLEVBQW9ERyxnQkFBcEQsQ0FGVixFQUUyRSxVQUFDVixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNyRkEsRUFBQUEsR0FBRyxDQUFDQyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFBRUMsSUFBQUEsSUFBSSxFQUFFSCxHQUFHLENBQUNJLE1BQUosQ0FBV0Q7QUFBbkIsR0FBckI7QUFDSCxDQUpELEVBSUdPLElBSkgsQ0FJUSxDQUFDTCx3QkFBRCxFQUFlQywyQkFBZixFQUFzQ0ssZ0JBQXRDLENBSlIsRUFJMkQsVUFBQ1osR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDckVBLEVBQUFBLEdBQUcsQ0FBQ0MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLElBQUFBLElBQUksRUFBRUgsR0FBRyxDQUFDSSxNQUFKLENBQVdEO0FBQW5CLEdBQXJCO0FBQ0gsQ0FORDtBQVFBVCxNQUFNLENBQUNFLEtBQVAsQ0FBYSxRQUFiLEVBQXVCYyxJQUF2QixDQUE0QixDQUFDSiwyQkFBRCxFQUF3Qk0sMkJBQXhCLEVBQStDQyxzQkFBL0MsQ0FBNUIsRUFBOEYsVUFBQ2QsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDeEdBLEVBQUFBLEdBQUcsQ0FBQ0MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLElBQUFBLElBQUksRUFBRUgsR0FBRyxDQUFDSSxNQUFKLENBQVdELElBQW5CO0FBQXlCVyxJQUFBQSxLQUFLLEVBQUVkLEdBQUcsQ0FBQ0ksTUFBSixDQUFXVTtBQUEzQyxHQUFyQjtBQUNILENBRkQ7QUFJQXBCLE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLFNBQWIsRUFBd0JjLElBQXhCLENBQTZCLENBQUNKLDJCQUFELEVBQXdCUyx1QkFBeEIsRUFBMkNDLHVCQUEzQyxFQUE4REosMkJBQTlELEVBQXFGSyxhQUFyRixFQUE4Rkosc0JBQTlGLENBQTdCLEVBQThJLFVBQUNkLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ3hKQSxFQUFBQSxHQUFHLENBQUNDLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUFFQyxJQUFBQSxJQUFJLEVBQUVILEdBQUcsQ0FBQ0ksTUFBSixDQUFXRCxJQUFuQjtBQUF5QlcsSUFBQUEsS0FBSyxFQUFFZCxHQUFHLENBQUNJLE1BQUosQ0FBV1U7QUFBM0MsR0FBckI7QUFDSCxDQUZEO0FBSUFwQixNQUFNLENBQUNFLEtBQVAsQ0FBYSxtQkFBYixFQUFrQ2MsSUFBbEMsQ0FBdUMsQ0FBQ0wsd0JBQUQsRUFBZUcsMEJBQWYsRUFBNkJGLDJCQUE3QixFQUFvRFksZ0JBQXBELENBQXZDLEVBQXdHLFVBQUNuQixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNsSEEsRUFBQUEsR0FBRyxDQUFDQyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFBRUMsSUFBQUEsSUFBSSxFQUFFSCxHQUFHLENBQUNJLE1BQUosQ0FBV0Q7QUFBbkIsR0FBckI7QUFDSCxDQUZEO0FBSUFnQixNQUFNLENBQUNDLE9BQVAsR0FBaUIxQixNQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImxldCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcblxyXG5pbXBvcnQgYXV0aGVudGljYXRlLCB7IHJlcXVpcmVBZG1pbiB9IGZyb20gJy4uL2xpYi9oZWxwZXJzL2F1dGhlbnRpY2F0ZSdcclxuaW1wb3J0IHsgY2hlY2tQcm9wZXJ0eU1haWwsIGNoZWNrUHJvcGVydHlOYW1lLCBjaGVja1Byb3BlcnR5UGFzc3dvcmQsIGNoZWNrUHJvcGVydHlVc2VybmFtZSwgYXV0aGVudGljYXRlVXNlciwgYWRkVXNlciwgZmluZFVzZXIsIGdldEFsbFVzZXIsIGRlbGV0ZVVzZXIsIHVubG9ja1VzZXIsIHVwZGF0ZVVzZXIgfSBmcm9tICcuLi9jb250cm9sbGVyL3VzZXIuY29udHJvbGxlcic7XHJcblxyXG5sZXQgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKVxyXG5cclxucm91dGVyLnJvdXRlKCcvJykuZ2V0KFtnZXRBbGxVc2VyXSwgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IHVzZXI6IHJlcy5sb2NhbHMudXNlciB9KVxyXG59KVxyXG5cclxucm91dGVyLnJvdXRlKCcvOnVzZXJuYW1lJykuZ2V0KFthdXRoZW50aWNhdGUsIGNoZWNrUHJvcGVydHlVc2VybmFtZSwgZmluZFVzZXJdLCAocmVxLCByZXMpID0+IHtcclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgdXNlcjogcmVzLmxvY2Fscy51c2VyIH0pXHJcbn0pLmRlbGV0ZShbYXV0aGVudGljYXRlLCByZXF1aXJlQWRtaW4sIGNoZWNrUHJvcGVydHlVc2VybmFtZSwgZGVsZXRlVXNlcl0sIChyZXEsIHJlcykgPT4ge1xyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyB1c2VyOiByZXMubG9jYWxzLnVzZXIgfSlcclxufSkucG9zdChbYXV0aGVudGljYXRlLCBjaGVja1Byb3BlcnR5VXNlcm5hbWUsIHVwZGF0ZVVzZXJdLCAocmVxLCByZXMpID0+IHtcclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgdXNlcjogcmVzLmxvY2Fscy51c2VyIH0pXHJcbn0pXHJcblxyXG5yb3V0ZXIucm91dGUoJy9sb2dpbicpLnBvc3QoW2NoZWNrUHJvcGVydHlVc2VybmFtZSwgY2hlY2tQcm9wZXJ0eVBhc3N3b3JkLCBhdXRoZW50aWNhdGVVc2VyXSwgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IHVzZXI6IHJlcy5sb2NhbHMudXNlciwgdG9rZW46IHJlcy5sb2NhbHMudG9rZW4gfSlcclxufSlcclxuXHJcbnJvdXRlci5yb3V0ZSgnL3NpZ251cCcpLnBvc3QoW2NoZWNrUHJvcGVydHlVc2VybmFtZSwgY2hlY2tQcm9wZXJ0eU1haWwsIGNoZWNrUHJvcGVydHlOYW1lLCBjaGVja1Byb3BlcnR5UGFzc3dvcmQsIGFkZFVzZXIsIGF1dGhlbnRpY2F0ZVVzZXJdLCAocmVxLCByZXMpID0+IHtcclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgdXNlcjogcmVzLmxvY2Fscy51c2VyLCB0b2tlbjogcmVzLmxvY2Fscy50b2tlbiB9KVxyXG59KVxyXG5cclxucm91dGVyLnJvdXRlKCcvdW5sb2NrLzp1c2VybmFtZScpLnBvc3QoW2F1dGhlbnRpY2F0ZSwgcmVxdWlyZUFkbWluLCBjaGVja1Byb3BlcnR5VXNlcm5hbWUsIHVubG9ja1VzZXJdLCAocmVxLCByZXMpID0+IHtcclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgdXNlcjogcmVzLmxvY2Fscy51c2VyIH0pXHJcbn0pXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlciJdfQ==