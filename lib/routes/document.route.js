"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _express = _interopRequireDefault(require("express"));

var _expressValidator = require("express-validator");

var _stream = require("stream");

var _authenticate = _interopRequireWildcard(require("../lib/helpers/authenticate"));

var _document = require("../controller/document.controller");

var _documentCreateNew = _interopRequireDefault(require("../lib/requestSchemas/document.createNew.json"));

var _documentCheckout = _interopRequireDefault(require("../lib/requestSchemas/document.checkout.json"));

var _documentShare = _interopRequireDefault(require("../lib/requestSchemas/document.share.json"));

var _documentFileid = _interopRequireDefault(require("../lib/requestSchemas/document.fileid.json"));

var _validator = require("../lib/helpers/validator");

var multer = require('multer');

var router = _express["default"].Router();

var uploadFileHandler = multer({
  storage: multer.memoryStorage()
});
router.route('/')
/**
 * @api {get} /document/ All documents
 * @apiName documentsGetAll
 * @apiGroup Document
 * @apiDescription Gets all documents on the instance. Can only be accessed by an admin.
 * @apiSuccess {Object[]} document All documents
 * @apiError (401) NotAuthorized Only admins are allow to access this ressource
 * @apiError (500) InternalServerError Something went wron processing your request
 */
.get([_authenticate["default"], _authenticate.requireAdmin, _document.getAllFiles], function (req, res) {
  res.status(200).json({
    docs: res.locals.files
  });
})
/**
* @api {post} /document/ New document
* @apiName documentCreate
* @apiGroup Document
* @apiDescription Creates and uploads a new documents with its body.
* @apiParam {Buffer[]} files Page(s) for the document
* @apiParam {String} title Documents subject or title
* @apiParam {Date} dated Date the original document was recieved
* @apiParam {String} comment Comment to append to log
* @apiSuccess {Object} document The created document
* @apiError (415) {String} FileTypeError Filetype is not supported. So far only PDFs and picture types are supported
* @apiError (500) {String} InternalError Something went wrong
*/
.post([_authenticate["default"], uploadFileHandler.single('documents'), (0, _expressValidator.checkSchema)(_documentCreateNew["default"]), _validator.checkSchemaValidation, _document.createNewFile, _document.uploadFiles], function (req, res) {
  res.status(200).json({
    document: res.locals.file
  });
});
router.route('/own')
/**
 * @api {get} /document/own Own documents
 * @apiName documentGetOwn
 * @apiGroup Document
 * @apiDescription Returns the users documents
 * @apiSuccess {Array} docs User documents basic metadata
 * @apiError (401) {String} PermissionError Not allowed to GET this file
 * @apiError (500) {String} InternalError Something went wrong
 */
.get([_authenticate["default"], _document.getOwnFiles], function (req, res) {
  res.status(200).json({
    docs: res.locals.files
  });
});
router.route('/shared')
/**
 * @api {get} /document/shared Shared documents
 * @apiName documentGetShared
 * @apiGroup Document
 * @apiDescription Returns the documents shared with the user
 * @apiSuccess {Array} sharedDocs Shared documents basic metadata
 * @apiError (401) {String} PermissionError Not allowed to GET this file
 * @apiError (500) {String} InternalError Something went wrong
 */
.get([_authenticate["default"], _document.getSharedFiles], function (req, res) {
  res.status(200).json({
    docs: res.locals.files
  });
});
router.route('/checkout/:fileid')
/**
 * @api {get} /document/checkout/:fileid Document checkout
 * @apiName documentCheckout
 * @apiGroup Document
 * @apiDescription Checks out document and sends files as ZIP archive
 * @apiParam {String} fileid The fileid as part of the GET URL
 * @apiSuccess (200) {Stream} ZIP file stream
 * @apiError (401) PermissionError Not allowed to GET this file
 * @apiError (500) {String} InternalError Something went wrong
 */
.get([_authenticate["default"], (0, _expressValidator.checkSchema)(_documentCheckout["default"]), _validator.checkSchemaValidation, _document.getSingleFile, _document.checkPermissionToFile,
/* lockFile ,*/
_document.downloadFile], function (req, res) {
  res.writeHead(200, {
    'Content-Type': res.locals.file.mimetype,
    'Content-disposition': "attachment; filename=".concat(res.locals.file.title, ".").concat(res.locals.file.extension)
  });
  var stream = new _stream.Readable();

  stream._read = function () {};

  stream.push(res.locals.fileBuffer);
  stream.push(null);
  stream.pipe(res);
})
/**
 * @api {post} /document/checkout/:fileid
 * @apiName documentCheckin
 * @apiGroup Document
 * @apiDescription Accepts an upload for a locked file and unlocks said file
 * @apiParam {String} fileid The fileid as part of the POST URL
 * @apiSuccess (200) {Object} The uploaded document
 * @apiError (401) PermissionError Not allowed to POST this file
 * @apiError (500) {String} InternalError Something went wrong
 */
.post([_authenticate["default"], (0, _expressValidator.checkSchema)(_documentCheckout["default"]), _validator.checkSchemaValidation, _document.getSingleFile, _document.checkPermissionToFile, uploadFileHandler.array('documents'), _document.uploadFiles, _document.unlockFile], function (req, res) {
  res.status(200).json({
    doc: res.locals.file
  });
})
/**
* @api {unlock} /document/checkout/:fileid
* @apiName documentAdminUnlock
* @apiGroup Document
* @apiDescription Unlocks a locked document without actually submitting a new document file. Requires user to be an admin
* @apiParam {String} fileid The fileid as part of the POST URL
* @apiSuccess (200) {Object} The unlocked document
* @apiError (401) PermissionError Not allowed to UNLOCK this file
* @apiError (500) {String} InternalError Something went wrong
*/
.unlock([_authenticate["default"], _authenticate.requireAdmin, (0, _expressValidator.checkSchema)(_documentCheckout["default"]), _validator.checkSchemaValidation, _document.getSingleFile, _document.unlockFile], function (req, res) {
  res.status(200).json({
    doc: res.locals.file
  });
});
router.route('/share/:fileid')
/**
 * @api {post} /document/share/:fileid
 * @apiName documentShareFile
 * @apiGroup Document
 * @apiDescription Shares file with a new user
 * @apiParam {String} fileid The fileid as part of the POST URL
 * @apiParam {String} whoToShare Username to share the file with. Provided in body or query.
 * @apiSuccess (200) {Object} The updated document
 * @apiError (401) PermissionError Not allowed to edit this file
 * @apiError (500) {String} InternalError Something went wrong
 */
.post([_authenticate["default"], (0, _expressValidator.checkSchema)(_documentShare["default"]), _validator.checkSchemaValidation, _document.getSingleFile, _document.shareFile], function (req, res) {
  res.status(200).json({
    doc: res.locals.file
  });
});
router.route('/:fileid')
/**
 * @api {get} /document/:fileid Get single document
 * @apiName documentGetSingle
 * @apiGroup Document
 * @apiDescription Returns the single requested document
 * @apiParam {String} fileid The fileid as part of the GET URL
 * @apiSuccess {Object} document The requested object
 * @apiError (401) {String} PermissionError Not allowed to GET this file
 * @apiError (500) {String} InternalError Something went wrong
 */
.get([_authenticate["default"], (0, _expressValidator.checkSchema)(_documentFileid["default"]), _validator.checkSchemaValidation, _document.getSingleFile, _document.checkPermissionToFile], function (req, res) {
  res.status(200).json({
    doc: res.locals.file
  });
})
/**
* @api {delete} /document/:fileid Deletes document
* @apiName documentDeleteSingle
* @apiGroup Document
* @apiDescription Deletes the requested document
* @apiParam {String} fileid The fileid as part of the GET URL
* @apiSuccess {Object} document The deleted object
* @apiError (401) {String} PermissionError Not allowed to DELETE this file
* @apiError (500) {String} InternalError Something went wrong
*/
["delete"]([_authenticate["default"], (0, _expressValidator.checkSchema)(_documentFileid["default"]), _validator.checkSchemaValidation, _document.deleteSingleFile], function (req, res) {
  res.status(200).json({
    doc: res.locals.file
  });
});
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,